# -*- coding: utf-8 -*-
"""파이썬 기본공부 10

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11_dEU3K1etETZZVtUS5iOtviIJOHpGQV
"""

# 상속(inheritance) -> 물려받다. 물려받은 기능을 유지한 채 다른 기능을 추가

# 코드의 중복을 최소화 하기 위해서 -> 객체지향언어는 중복을 최소화 하기 위해 설계되었다.
# 클래스간의 관계를 성립할 때 사용한다.
# 자식클래스의 메서드 개수는 부모클래스의 메서드 개수랑 같거나 많다

# 물려주는 클래스 -> 부모클래스
# 물려받는 클래스 -> 자식클래스

class Person: # -> 사람
  def hi(self):
    print("안녕1111")

class Student(Person): # -> 학생
  def study(self):
    print("공부하다")

jin = Student()

jin.study()
jin.hi()

paul = Person()
#paul.study() # 부모는 자식에게 받는게 없음

class Person:
  def hi(self):
    print("안녕")

class Add_Person: # 인명부
  def __init__(self):
    self.person_directory = []

  def add_person(self, person):
    self.person_directory.append(person)

a = Add_Person()

a.add_person("bob")

# 부모클래스의 인스턴스 변수 물려받아 사용하는 법
class Person:
  def __init__(self):
    print("Person __init__ 호출됨")
    self.hello = "안녕"

class Student(Person):
  def __init__(self):
    print("Student __init__ 호출됨")
    self.studyRoom = "B class"

jin = Student()
print(jin.studyRoom)

paul = Person()
print(paul.hello)

# 부모클래스의 인스턴스 변수 물려받아 사용하는 법
class Person:
  def __init__(self):
    print("Person __init__ 호출됨")
    self.hello = "안녕1111"

class Student(Person):
  def __init__(self):
    print("Student __init__ 호출됨")
    super().__init__()
    self.studyRoom = "B class"

jin = Student()
print(jin.studyRoom)

paul = Person()
print(paul.hello)

print(jin.hello)

# 부모클래스의 인스턴스 변수 물려받아 사용하는 법
class Person:
  def __init__(self):
    print("Person __init__ 호출됨")
    self.hello = "안녕"

class Student(Person): # 자식클래스에 __init__ 메서드가 없으면 부모클래스의 __init__ 을 자동으로 실행시킨다.
  pass

jin = Student()

print(jin.hello)

# 메서드 오버라이딩 : 부모한테 물려받은 기능을 자식 수준에서 재정의해서 쓰겠다.
class Person:
  def hello(self):
    print("안녕하세요")

class Student(Person):
  def hello(self):
    print("안녕하세요 저는 ~~~ 입니다")

class Worker(Person):
  pass

jin = Student()
jin.hello()

paul = Worker()
paul.hello()